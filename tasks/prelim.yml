---

# Preliminary tasks that should always be run
# List users in order to look files inside each home directory

- name: PRELIM | Include audit specific variables
  when:
    - run_audit or audit_only
    - setup_audit
  tags:
    - setup_audit
    - run_audit
  ansible.builtin.include_vars: audit.yml

- name: PRELIM | Include pre-remediation audit tasks
  when:
    - run_audit or audit_only
    - setup_audit
  tags:
    - run_audit
  ansible.builtin.import_tasks: pre_remediation_audit.yml

- name: "PRELIM | AUDIT | Interactive Users"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false" && $7 != "/dev/null") { print $1 }'
  changed_when: false
  register: discovered_interactive_usernames

- name: "PRELIM | AUDIT | Interactive User accounts home directories"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $6 }'
  changed_when: false
  register: discovered_interactive_users_home

- name: "PRELIM | AUDIT | Interactive UIDs"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $3 }'
  changed_when: false
  register: discovered_interactive_uids

- name: "PRELIM | capture /etc/password variables"
  tags: always
  ansible.builtin.include_tasks:
    file: parse_etc_password.yml

- name: "PRELIM | List users accounts"
  tags:
    - level1-server
    - level1-workstation
    - users
  ansible.builtin.shell: "awk -F: '{print $1}' /etc/passwd"
  changed_when: false
  check_mode: false
  register: users

- name: "PRELIM | Gather accounts with empty password fields"
  tags:
    - level1-server
    - level1-workstation
    - passwords
  ansible.builtin.shell: "cat /etc/shadow | awk -F: '($2 == \"\" ) {j++;print $1; } END {exit j}'"
  changed_when: false
  check_mode: false
  register: empty_password_accounts

- name: "PRELIM | Gather UID 0 accounts other than root"
  tags:
    - rule_6.2.9
    - level1-server
    - level1-workstation
    - users
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: prelim_uid_zero_accounts_except_root

- name: "PRELIM | Section 1.1 | Create list of mount points"
  tags:
    - level1-server
    - level1-workstation
  ansible.builtin.set_fact:
    mount_names: "{{ ansible_facts.mounts | map(attribute='mount') | list }}"

- name: "PRELIM | Set facts based on boot type"
  block:
    - name: "PRELIM | Check whether machine is UEFI-based"
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: prelim_efi_boot

    - name: "PRELIM | set legacy boot and grub path | Bios"
      when: not prelim_efi_boot.stat.exists
      ansible.builtin.set_fact:
        suse15cis_legacy_boot: true
        grub2_path: /etc/grub2.cfg

    - name: "PRELIM | set grub fact | UEFI"
      when: prelim_efi_boot.stat.exists
      ansible.builtin.set_fact:
        grub2_path: /etc/grub2-efi.cfg

- name: PRELIM | Discover Gnome Desktop Environment
  tags: always
  ansible.builtin.stat:
    path: /usr/share/gnome/gnome-version.xml
  register: prelim_gnome_present

- name: PRELIM | Discover dconf systemdb
  when: suse15cis_gui
  ansible.builtin.shell: grep system-db /etc/dconf/profile/user | cut -d ':' -f2
  changed_when: false
  failed_when: prelim_dconf_db.rc not in [ 0, 1 ]
  register: prelim_dconf_db

- name: PRELIM | Discover dconf db files
  when: suse15cis_gui
  ansible.builtin.find:
    path: /etc/dconf/db/local.d
    pattern: '*'
  register: prelim_dconf_locald_files

# - name: "PRELIM | Section 4.1 | Configure System Accounting (auditd)"
#   when:
#     - '"auditd" not in ansible_facts.packages'
#     - suse15cis_rule_4_1_1_1
#   tags:
#     - level2-server
#     - level2-workstation
#     - patch
#     - rule_4.1.1.1
#     - auditd
#   ansible.builtin.package:
#     name: audit
#     state: present

# - name: "PRELIM | 4.1.4.5 | Audit conf and rules files | list files"
#   when:
#     - suse15cis_rule_4_1_4_5 or
#       suse15cis_rule_4_1_4_6 or
#       suse15cis_rule_4_1_4_7
#   tags:
#     - level2-server
#     - level2-workstation
#     - patch
#     - auditd
#     - rule_4.1.4.5
#     - rule_4.1.4.6
#     - rule_4.1.4.7
#   ansible.builtin.find:
#     path: /etc/audit
#     file_type: file
#     recurse: true
#     patterns: '*.conf,*.rules'
#   register: prelim_auditd_conf_files

# - name: "PRELIM | Section 5.1 | Configure cron"
#   when:
#     - suse15cis_rule_5_1_1
#     - '"cronie" not in ansible_facts.packages'
#   tags:
#     - level1-server
#     - level1-workstation
#     - rule_5.1.1
#     - cron
#   ansible.builtin.package:
#     name: cronie
#     state: present

# Added to ensure ssh drop in file exists if not default /etc/ssh/sshd_config
- name: "PRELIM | Section 5.2 | SSH"
  when:
    - suse15cis_sshd_config_file != '/etc/ssh/sshd_config'
    - "'openssh-server' in ansible_facts.packages"
  tags: always
  ansible.builtin.file:
    path: "{{ suse15cis_sshd_config_file }}"
    owner: root
    group: root
    mode: '0600'
    state: touch

# - name: "PRELIM | 5.3.4 | Find all sudoers files."
#   when:
#     - suse15cis_rule_5_3_4 or
#       suse15cis_rule_5_3_5
#   tags:
#     - rule_5.3.4
#     - rule_5.3.5
#   ansible.builtin.shell: "find /etc/sudoers /etc/sudoers.d/ -type f ! -name '*~' ! -name '*.*'"
#   changed_when: false
#   failed_when: false
#   check_mode: false
#   register: prelim_sudoers_files

- name: "PRELIM | Discover Interactive UID MIN and MIN from logins.def"
  block:
    - name: "PRELIM | Capture UID_MIN information from logins.def"
      ansible.builtin.shell: grep -w "^UID_MIN" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_uid_min_id

    - name: "PRELIM | Capture UID_MAX information from logins.def"
      ansible.builtin.shell: grep -w "^UID_MAX" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_uid_max_id

    - name: "PRELIM | Capture GID_MIN information from logins.def"
      ansible.builtin.shell: grep -w "^GID_MIN" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_gid_min_id

    - name: "PRELIM | set_facts for interactive uid/gid"
      ansible.builtin.set_fact:
        min_int_uid: "{{ prelim_uid_min_id.stdout }}"
        max_int_uid: "{{ prelim_uid_max_id.stdout }}"
        min_int_gid: "{{ prelim_gid_min_id.stdout }}"

- name: "PRELIM | Output of uid findings"
  when: not discover_int_uid
  ansible.builtin.debug:
    msg: "{{ min_int_uid }} {{ max_int_uid }}"

- name: "PRELIM | Gather the package facts after prelim"
  tags: always
  ansible.builtin.package_facts:
    manager: auto
