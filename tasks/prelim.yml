---

# Preliminary tasks that should always be run
# List users in order to look files inside each home directory

- name: "PRELIM | Update package repositories cache"
  ansible.builtin.package:
    name: "*"
    update_cache: true

- name: "PRELIM | Include audit specific variables"
  when:
    - run_audit or audit_only
    - setup_audit
  tags:
    - setup_audit
    - run_audit
  ansible.builtin.include_vars: audit.yml

- name: "PRELIM | Include pre-remediation audit tasks"
  when:
    - run_audit or audit_only
    - setup_audit
  tags:
    - run_audit
  ansible.builtin.import_tasks: pre_remediation_audit.yml

- name: "PRELIM | AUDIT | Interactive Users"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false" && $7 != "/dev/null") { print $1 }'
  changed_when: false
  register: prelim_interactive_usernames

- name: "PRELIM | AUDIT | Interactive User accounts home directories"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $6 }'
  changed_when: false
  register: prelim_interactive_users_home

- name: "PRELIM | AUDIT | Interactive UIDs"
  tags: always
  ansible.builtin.shell: >
    grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/nologin" && $7 != "/bin/false") { print $3 }'
  changed_when: false
  register: prelim_interactive_uids

- name: "PRELIM | AUDIT | capture /etc/password variables"
  tags: always
  ansible.builtin.include_tasks:
    file: parse_etc_password.yml

- name: "PRELIM | AUDIT | List users accounts"
  tags:
    - level1-server
    - level1-workstation
    - users
  ansible.builtin.shell: "awk -F: '{print $1}' /etc/passwd"
  changed_when: false
  check_mode: false
  register: users

- name: "PRELIM | AUDIT | Gather accounts with empty password fields"
  tags:
    - level1-server
    - level1-workstation
    - passwords
  ansible.builtin.shell: "cat /etc/shadow | awk -F: '($2 == \"\" ) {j++;print $1; } END {exit j}'"
  changed_when: false
  check_mode: false
  register: empty_password_accounts

- name: "PRELIM | AUDIT | Gather UID 0 accounts other than root"
  tags:
    - rule_6.2.9
    - level1-server
    - level1-workstation
    - users
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: prelim_uid_zero_accounts_except_root

- name: PRELIM | AUDIT | Section 1.1 | Create list of mount points
  tags: always
  ansible.builtin.set_fact:
    prelim_mount_names: "{{ ansible_facts.mounts | map(attribute='mount') | list }}"

- name: PRELIM | AUDIT | Section 1.1 | Retrieve mount options
  tags: always
  block:
    - name: PRELIM | AUDIT | Section 1.1 | Retrieve mount options - call mount  # noqa command-instead-of-module
      ansible.builtin.shell: |
        mount | awk '{print $1, $3, $5, $6}'
      changed_when: false
      register: prelim_mount_output

    - name: PRELIM | AUDIT | Section 1.1 | Retrieve mount options - build fact  # This is inherited and used in mountpoints tasks
      ansible.builtin.set_fact:
        prelim_mount_point_fs_and_options: >-
          {%- set prelim_mount_point_fs_and_options = {} -%}
          {%- for line in prelim_mount_output.stdout_lines -%}
          {%- set fields = line.split() -%}
          {%- set _ = prelim_mount_point_fs_and_options.update({fields[1]: {'src': fields[0], 'fs_type': fields[2], 'original_options': fields[3][1:-1].split(','), 'options': fields[3][1:-1].split(',')}}) -%}
          {%- endfor -%}
          {{ prelim_mount_point_fs_and_options }}

    - name: "PRELIM | AUDIT | Debug of mount variables to assist in troubleshooting"
      when: suse15cis_debug_mount_data
      ansible.builtin.debug:
        msg: "{{ ['Output of mounts variables used for debug!!'] + prelim_mount_point_fs_and_options }}"

- name: "PRELIM | AUDIT | Set facts based on boot type"
  block:
    - name: "PRELIM | AUDIT | Check whether machine is UEFI-based"
      ansible.builtin.stat:
        path: /sys/firmware/efi
      register: prelim_efi_boot

    - name: "PRELIM | AUDIT | Set legacy boot and grub path | Bios"
      when: not prelim_efi_boot.stat.exists
      ansible.builtin.set_fact:
        suse15cis_legacy_boot: true
        grub2_path: /etc/grub2.cfg

    - name: "PRELIM | AUDIT | Set grub fact | UEFI"
      when: prelim_efi_boot.stat.exists
      ansible.builtin.set_fact:
        grub2_path: /etc/grub2-efi.cfg

- name: "PRELIM | PATCH | Setup crypto-policy"
  when:
    - suse15cis_rule_1_6_1
  tags:
    - level1-server
    - level1-workstation
    - rule_1.6.1
    - crypto
  block:
    - name: "PRELIM | PATCH | Install crypto-policies | pkgs present"
      ansible.builtin.package:
        name:
          - crypto-policies
          - crypto-policies-scripts
        state: present

    - name: "PRELIM | AUDIT | Gather system-wide crypto-policy"
      ansible.builtin.command: 'update-crypto-policies --show'
      changed_when: false
      check_mode: false
      register: prelim_system_wide_crypto_policy

    - name: "PRELIM | AUDIT | Gather system-wide crypto-policy | set fact system policy"
      ansible.builtin.set_fact:
        current_crypto_policy: "{{ prelim_system_wide_crypto_policy.stdout.split(':')[0] }}"

    - name: "PRELIM | AUDIT | Gather system-wide crypto-policy module | set fact system policy submodule"
      when: "':' in prelim_system_wide_crypto_policy.stdout"
      ansible.builtin.set_fact:
        current_crypto_module: "{{ prelim_system_wide_crypto_policy.stdout.split(':')[1] }}"

- name: PRELIM | AUDIT | Discover Gnome Desktop Environment
  tags: always
  ansible.builtin.stat:
    path: /usr/share/gnome/gnome-version.xml
  register: prelim_gnome_present

- name: PRELIM | AUDIT | Discover dconf systemdb
  when: suse15cis_gui
  ansible.builtin.shell: grep system-db /etc/dconf/profile/user | cut -d ':' -f2
  changed_when: false
  failed_when: prelim_dconf_db.rc not in [ 0, 1 ]
  register: prelim_dconf_db

- name: PRELIM | AUDIT | Discover dconf db files
  when: suse15cis_gui
  ansible.builtin.find:
    path: /etc/dconf/db/local.d
    pattern: '*'
  register: prelim_dconf_locald_files

- name: PRELIM | AUDIT | Wireless adapter pre-requisites
  when:
    - suse15cis_rule_3_1_2
    - not system_is_container
  tags: always
  block:
    - name: PRELIM | AUDIT | Discover is wirelss adapter on system
      ansible.builtin.shell: find /sys/class/net/*/ -type d -name wireless
      changed_when: false
      failed_when: prelim_wireless_adapters_exist.rc not in [ 0, 1 ]
      register: prelim_wireless_adapters_exist

    - name: "PRELIM | AUDIT | If wireless adapter present capture module"
      when: prelim_wireless_adapters_exist.rc == 0
      ansible.builtin.shell: |
        for driverdir in $(find /sys/class/net/*/ -type d -name wireless | xargs -0 dirname);
          do basename "$(readlink -f "$driverdir"/device/driver/module)";
        done | sort -u
      changed_when: false
      failed_when: prelim_wireless_modules.rc not in [ 0, 1 ]
      register: prelim_wireless_modules

- name: "PRELIM | PATCH | If firewalld install python package"
  when: suse15cis_firewall_package == 'firewalld'
  tags: always
  ansible.builtin.package:
    name: python3-firewall
    state: latest

- name: "PRELIM | PATCH | Set sshd config file"
  when:
    - suse15cis_sshd_config_file != '/etc/ssh/sshd_config'
    - "'openssh-server' in ansible_facts.packages"
  tags: always
  ansible.builtin.file:
    path: "{{ suse15cis_sshd_config_file }}"
    owner: root
    group: root
    mode: 'u-x,go-rwx'
    state: touch

- name: "PRELIM | PATCH | Create pwquality directory"
  when: not suse15cis_use_pam_config
  ansible.builtin.file:
    path: /etc/security/pwquality.conf.d/
    state: directory
    mode: 'u+x,go-w'

- name: "PRELIM | PATCH | find pw_quality files"
  tags: always
  ansible.builtin.find:
    paths: /etc/security/
    pattern: pwquality*
  register: prelim_pwquality_files

- name: "PRELIM | AUDIT | Discover Interactive UID MIN and MIN from logins.def"
  block:
    - name: "PRELIM | AUDIT | Capture UID_MIN information from logins.def"
      ansible.builtin.shell: grep -w "^UID_MIN" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_uid_min_id

    - name: "PRELIM | AUDIT | Capture UID_MAX information from logins.def"
      ansible.builtin.shell: grep -w "^UID_MAX" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_uid_max_id

    - name: "PRELIM | AUDIT | Capture GID_MIN information from logins.def"
      ansible.builtin.shell: grep -w "^GID_MIN" /etc/login.defs | awk '{print $NF}'
      changed_when: false
      register: prelim_gid_min_id

    - name: "PRELIM | AUDIT | Set_facts for interactive uid/gid"
      ansible.builtin.set_fact:
        min_int_uid: "{{ prelim_uid_min_id.stdout }}"
        max_int_uid: "{{ prelim_uid_max_id.stdout }}"
        min_int_gid: "{{ prelim_gid_min_id.stdout }}"

- name: "PRELIM | AUDIT | Discover audit logfile"
  when:
    - suse15cis_rule_6_3_4_1 or
      suse15cis_rule_6_3_4_2 or
      suse15cis_rule_6_3_4_3 or
      suse15cis_rule_6_3_4_4
  tags: always
  ansible.builtin.shell: grep ^log_file /etc/audit/auditd.conf | awk '{ print $NF }'
  changed_when: false
  register: prelim_auditd_logfile

- name: "PRELIM | AUDIT | Audit conf and rules files | list files"
  when:
    - suse15cis_rule_6_3_4_5 or
      suse15cis_rule_6_3_4_6 or
      suse15cis_rule_6_3_4_7
  tags: always
  ansible.builtin.find:
    path: /etc/audit
    file_type: file
    recurse: true
    patterns: "*.conf,*.rules"
  register: prelim_auditd_conf_files

- name: "PRELIM | AUDIT | Check if auditd is immutable before changes"
  when: "'auditd' in ansible_facts.packages"
  tags: always
  ansible.builtin.shell: auditctl -l | grep -c '-e 2'
  changed_when: false
  failed_when: prelim_auditd_immutable_check.rc not in [ 0, 1 ]
  register: prelim_auditd_immutable_check

- name: "PRELIM | PATCH | Install ACL if 7.2.8"
  when: suse15cis_rule_7_2_8
  ansible.builtin.package:
    name: acl
    state: present

- name: "PRELIM | AUDIT | Gather the package facts after prelim"
  tags: always
  ansible.builtin.package_facts:
    manager: auto
