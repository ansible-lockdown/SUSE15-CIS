---
# tasks file for SUSE15-CIS

- name: Check OS version and family
  when: os_check
  tags: always
  ansible.builtin.assert:
    that: (ansible_facts.os_family == 'Suse' and ansible_facts.distribution_version is version_compare('15.6', '>='))
    fail_msg: "This role can only be run against Supported OSs. {{ ansible_facts.os_family }} {{ ansible_facts.distribution_version }} is not supported."
    success_msg: "This role is running against a supported OS {{ ansible_facts.distribution }} {{ ansible_facts.distribution_version }}"

- name: Check ansible version
  tags: always
  ansible.builtin.assert:
    that: ansible_version.full is version_compare(min_ansible_version, '>=')
    fail_msg: "You must use Ansible {{ min_ansible_version }} or greater"
    success_msg: "This role is running a supported version of ansible {{ ansible_version.full }} >= {{ min_ansible_version }}"

- name: "Check password set for {{ ansible_env.SUDO_USER }}"
  when:
    - suse15cis_rule_5_2_4
    - ansible_env.SUDO_USER is defined
    - not system_is_ec2
  tags: always
  vars:
    sudo_password_rule: suse15cis_rule_5_3_4  # pragma: allowlist secret
  block:
    - name: "Check password set for {{ ansible_env.SUDO_USER }} | password state"  # noqa name[template]
      ansible.builtin.shell: "(grep {{ ansible_env.SUDO_USER }} /etc/shadow || echo 'not found:not found') | awk -F: '{print $2}'"
      changed_when: false
      failed_when: false
      check_mode: false
      register: prelim_ansible_user_password_set

    - name: "Check for local account {{ ansible_env.SUDO_USER }} | Check for local account"  # noqa name[template]
      when: prelim_ansible_user_password_set.stdout == "not found"
      ansible.builtin.debug:
        msg: "No local account found for {{ ansible_env.SUDO_USER }} user. Skipping local account checks."

    - name: "Check local account"
      block:
        - name: "Check password set for {{ ansible_env.SUDO_USER }} | Assert local password set"  # noqa name[template]
          ansible.builtin.assert:
            that:
              - prelim_ansible_user_password_set.stdout | length != 0
              - prelim_ansible_user_password_set.stdout != "!!"
            fail_msg: "You have {{ sudo_password_rule }} enabled but the user = {{ ansible_env.SUDO_USER }} has no password set - It can break access"
            success_msg: "You have a password set for the {{ ansible_env.SUDO_USER }} user"

        - name: "Check account is not locked for {{ ansible_env.SUDO_USER }} | Assert local account not locked"  # noqa name[template]
          when: prelim_ansible_user_password_set.stdout != "not found"
          ansible.builtin.assert:
            that:
              - not prelim_ansible_user_password_set.stdout.startswith("!")
            fail_msg: "You have {{ sudo_password_rule }} enabled but the user = {{ ansible_env.SUDO_USER }} is locked - It can break access"
            success_msg: "The local account is not locked for {{ ansible_env.SUDO_USER }} user"

- name: "Check crypto-policy module input"
  when:
    - suse15cis_rule_1_6_2
    - suse15cis_crypto_policy_module | length > 0
  tags:
    - rule_1.6.1
    - crypto
    - NIST800-53R5_SC-8
  ansible.builtin.assert:
    that: suse15cis_crypto_policy_module in suse15cis_allowed_crypto_policies_modules
    fail_msg: "Crypto policy module is not a permitted version"
    success_msg: "Crypto policy module is a permitted version"

- name: Setup rules if container
  when:
    - ansible_connection == 'docker' or
      ansible_facts.virtualization_type in ["docker", "lxc", "openvz", "podman", "container"]
  tags:
    - container_discovery
    - always
  block:
    - name: Discover and set container variable if required
      ansible.builtin.set_fact:
        system_is_container: true

    - name: Load variable for container
      ansible.builtin.include_vars:
        file: "{{ container_vars_file }}"

    - name: Output if discovered is a container
      when: system_is_container
      ansible.builtin.debug:
        msg: system has been discovered as a container

- name: Check crypto-policy input
  ansible.builtin.assert:
    that: suse15cis_crypto_policy in suse15cis_allowed_crypto_policies
    fail_msg: "Crypto policy is not a permitted version"
    success_msg: "Crypto policy is a permitted version"

- name: Check crypto-policy module input
  when:
    - suse15cis_rule_1_6_1
    - suse15cis_crypto_policy_module | length > 0
  tags: always
  ansible.builtin.assert:
    that: suse15cis_crypto_policy_module in suse15cis_allowed_crypto_policies_modules
    fail_msg: "Crypto policy module is not a permitted version"
    success_msg: "Crypto policy module is a permitted version"

- name: Check suse15cis_bootloader_password_hash variable has been changed
  when:
    - suse15cis_set_boot_pass
    - suse15cis_rule_1_4_1
  tags: always
  ansible.builtin.assert:
    that: suse15cis_bootloader_password_hash.find('grub.pbkdf2.sha512') != -1 and suse15cis_bootloader_password_hash != 'grub.pbkdf2.sha512.changethispassword'  # pragma: allowlist secret
    msg: "This role will not be able to run single user password commands as suse15cis_bootloader_password_hash variable has not been set correctly"

- name: Gather the package facts
  tags: always
  ansible.builtin.package_facts:
    manager: auto

- name: Include preliminary steps
  tags: always
  ansible.builtin.import_tasks:
    file: prelim.yml

- name: Run Section 1 tasks
  when: suse15cis_section1
  tags: suse15cis_section1
  ansible.builtin.import_tasks:
    file: section_1/main.yml

- name: Run Section 2 tasks
  when: suse15cis_section2
  tags: suse15cis_section2
  ansible.builtin.import_tasks:
    file: section_2/main.yml

- name: Run Section 3 tasks
  when: suse15cis_section3
  tags: suse15cis_section3
  ansible.builtin.import_tasks:
    file: section_3/main.yml

- name: Run Section 4 tasks
  when: suse15cis_section4
  tags: suse15cis_section4
  ansible.builtin.import_tasks:
    file: section_4/main.yml

- name: Run Section 5 tasks
  when: suse15cis_section5
  tags: suse15cis_section5
  ansible.builtin.import_tasks:
    file: section_5/main.yml

- name: Run Section 6 tasks
  when: suse15cis_section6
  tags: suse15cis_section6
  ansible.builtin.import_tasks:
    file: section_6/main.yml

- name: Run Section 7 tasks
  when: suse15cis_section7
  tags: suse15cis_section7
  ansible.builtin.import_tasks:
    file: section_7/main.yml

- name: Run auditd logic
  when: update_audit_template
  tags: always
  ansible.builtin.import_tasks:
    file: auditd.yml

- name: Run post remediation tasks
  tags: always
  ansible.builtin.import_tasks:
    file: post.yml

- name: Run post_remediation audit
  when: run_audit
  ansible.builtin.import_tasks:
    file: post_remediation_audit.yml

- name: Show Audit Summary
  when: run_audit
  ansible.builtin.debug:
    msg: "{{ audit_results.split('\n') }}"

- name: If Warnings found Output count and control IDs affected
  when: warn_count != 0
  tags: always
  ansible.builtin.debug:
    msg: "You have {{ warn_count }} Warning(s) that require investigating that are related to the following benchmark ID(s) {{ warn_control_list }}"
